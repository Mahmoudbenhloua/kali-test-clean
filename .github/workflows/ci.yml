name: CI/CD Pipeline with Security Scans

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-scan:
    runs-on: ubuntu-latest

    steps:
      # üß© Checkout source code
      - name: Checkout code
        uses: actions/checkout@v4

      # üêç Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # üì¶ Install dependencies
      - name: Install dependencies
        run: pip install -r requirements.txt

      # üß™ Run tests
      - name: Run tests
        run: pytest || echo "No tests found, skipping..."

      # üê≥ Build Docker image
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }} .

      # üîç Trivy vulnerability scan (JSON output for Prometheus)
      - name: Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }}
          severity: CRITICAL,HIGH,MEDIUM,LOW
          format: json
          output: trivy-report.json
          ignore-unfixed: true
          exit-code: 0  # don't block push
      # üì§ Push Trivy report to Grafana Loki
      - name: Push Trivy vulnerabilities to Grafana Loki
        env:
          LOKI_URL: ${{ secrets.GRAFANA_LOKI_URL }}
          GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }}
          REPO: ${{ github.repository }}
          COMMIT: ${{ github.sha }}
        run: |
          TIMESTAMP=$(date +%s%N | cut -b1-13)
          # Extract vulnerabilities array from Trivy JSON and create Loki stream entries
          ENTRIES=$(jq -c --arg timestamp "$TIMESTAMP" --arg repo "$REPO" --arg commit "$COMMIT" '
            .Results[]?.Vulnerabilities[]? | 
            {stream: {job:"trivy-scan", repo:$repo, commit:$commit, severity:.Severity}, values: [[$timestamp, tostring]]} 
          ' trivy-report.json)
          
          # Compose Loki push JSON payload
          PAYLOAD="{\"streams\":["
          first=true
          for entry in $ENTRIES; do
            if $first; then
              PAYLOAD+=$entry
              first=false
            else
              PAYLOAD+=","$entry
            fi
          done
          PAYLOAD+="]}"
          
          # Send payload to Loki
          curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer $GRAFANA_API_KEY" \
               --data "$PAYLOAD" \
               $LOKI_URL/loki/api/v1/push


      # üêã Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # üöÄ Push image to DockerHub
      - name: Push Docker image
        if: success()
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }}
