name: CI/CD Pipeline with Security Scans

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GRAFANA_LOKI_URL: https://logs-prod-012.grafana.net
  GRAFANA_USER_ID: ${{ secrets.GRAFANA_USER_ID }}        # Your numeric ID from Users page
  GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }}        # The API key you just created

jobs:
  build-test-scan:
    runs-on: ubuntu-latest

    steps:
      # ... your existing steps (checkout, build, tests) ...

      # üîç Scan image with Trivy
      - name: Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }}
          severity: CRITICAL,HIGH
          format: 'json'
          output: 'trivy-results.json'
          ignore-unfixed: true
          exit-code: 0

      # üì§ Push results to Grafana Cloud
      - name: Push Trivy results to Grafana Cloud
        if: always()
        run: |
          echo "Pushing Trivy results to Grafana Cloud..."
          
          TIMESTAMP=$(date +%s000000000)
          
          if [ -f "trivy-results.json" ]; then
            # Count vulnerabilities
            CRITICAL_COUNT=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-results.json || echo "0")
            HIGH_COUNT=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity == "HIGH")] | length' trivy-results.json || echo "0")
            
            # Push to Grafana Cloud Loki
            curl -X POST \
              "$GRAFANA_LOKI_URL/loki/api/v1/push" \
              -u "$GRAFANA_USER_ID:$GRAFANA_API_KEY" \
              -H "Content-Type: application/json" \
              -d @- << EOF
          {
            "streams": [
              {
                "stream": {
                  "job": "security-scans",
                  "tool": "trivy",
                  "repository": "${{ github.repository }}",
                  "commit": "${{ github.sha }}"
                },
                "values": [
                  [ "$TIMESTAMP", "Trivy Scan Results: $CRITICAL_COUNT Critical, $HIGH_COUNT High vulnerabilities" ]
                ]
              }
            ]
          }
          EOF
            echo "‚úÖ Trivy results sent to Grafana Cloud"
          else
            echo "‚ùå trivy-results.json not found"
          fi

      # ... your other steps (Docker push, etc) ...
