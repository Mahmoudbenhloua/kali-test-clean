name: Security Scan and Push to Grafana Cloud

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  security-scan:
    runs-on: ubuntu-latest

    env:
      # Grafana Loki endpoint for your stack
      GRAFANA_LOKI_URL: https://logs-prod-012.grafana.net
      # Injected from GitHub Secrets
      GRAFANA_USER_ID: ${{ secrets.GRAFANA_USER_ID }}
      GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker (needed for Grype run)
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          docker build -t "${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }}" .

      - name: Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }}
          format: json
          output: trivy-results.json
          severity: CRITICAL,HIGH
          ignore-unfixed: true
          exit-code: 0

      - name: Grype vulnerability scan (container)
        run: |
          docker run --rm -v "${{ github.workspace }}":/work anchore/grype:latest \
            ${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }} -o json > grype-results.json

      - name: Upload security scan reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            trivy-results.json
            grype-results.json

      - name: Push scan results to Grafana Cloud
        if: always()
        run: |
          set -eo pipefail
          echo "Sending security scan results to Grafana Cloud..."

          push_to_loki() {
            local tool="$1"
            local file="$2"
            local timestamp
            timestamp="$(date +%s000000000)"

            if [ ! -f "$file" ]; then
              echo "⚠️  $file not found, skipping $tool"
              return 0
            fi

            if [ "$tool" = "trivy" ]; then
              CRITICAL_COUNT=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' "$file")
              HIGH_COUNT=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity == "HIGH")] | length' "$file")
              SUMMARY="Trivy Scan: ${CRITICAL_COUNT} Critical, ${HIGH_COUNT} High vulnerabilities"
            else
              CRITICAL_COUNT=$(jq '.matches[]? | select(.vulnerability.severity == "Critical") | .vulnerability.id' "$file" | wc -l)
              HIGH_COUNT=$(jq '.matches[]? | select(.vulnerability.severity == "High") | .vulnerability.id' "$file" | wc -l)
              SUMMARY="Grype Scan: ${CRITICAL_COUNT} Critical, ${HIGH_COUNT} High vulnerabilities"
            fi

            # Build JSON payload using jq to avoid heredoc/quoting issues
            payload=$(jq -n \
              --arg tool "$tool" \
              --arg repo "${{ github.repository }}" \
              --arg branch "${{ github.ref_name }}" \
              --arg commit "${{ github.sha }}" \
              --arg timestamp "$timestamp" \
              --arg summary "$SUMMARY" \
              '{streams:[{stream:{job:"security-scans", tool:$tool, repository:$repo, branch:$branch, commit:$commit}, values:[[ $timestamp, $summary ]]}]}'
            )

            echo "Payload: $payload"

            # Send to Grafana Loki
            response_code=$(echo "$payload" | curl -s -o /dev/null -w "%{http_code}" -u "${GRAFANA_USER_ID}:${GRAFANA_API_KEY}" \
              -H "Content-Type: application/json" \
              -d @- "${GRAFANA_LOKI_URL}/loki/api/v1/push")
            
            if [ "$response_code" = "204" ] || [ "$response_code" = "200" ]; then 
              echo "✅ $tool results sent (HTTP $response_code)"
            else 
              echo "❌ Loki push failed (HTTP $response_code)"
            fi
          }

          push_to_loki "trivy" "trivy-results.json"
          push_to_loki "grype" "grype-results.json"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image
        if: success()
        run: |
          docker push "${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }}"
