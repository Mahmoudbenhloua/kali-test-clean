name: CI/CD Pipeline with Security Scans

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-scan:
    runs-on: ubuntu-latest

    steps:
      # 🧩 Checkout source code
      - name: Checkout code
        uses: actions/checkout@v4

      # 🐍 Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # 📦 Install dependencies
      - name: Install dependencies
        run: pip install -r requirements.txt

      # 🧪 Run tests
      - name: Run tests
        run: pytest || echo "No tests found, skipping..."

      # 🐳 Build Docker image
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }} .

      # 🔍 Trivy vulnerability scan (JSON output for Prometheus)
      - name: Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }}
          severity: CRITICAL,HIGH,MEDIUM,LOW
          format: json
          output: trivy-report.json
          ignore-unfixed: true
          exit-code: 0  # don't block push
      # 📤 Push Trivy report to Grafana Loki
      - name: Push Trivy report to Grafana Loki
        env:
          LOKI_URL: ${{ secrets.GRAFANA_LOKI_URL }}
          GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }}
        run: |
          # Prepare Loki log entry format
          TIMESTAMP=$(date +%s%N | cut -b1-13)
          LOG_ENTRY=$(jq -c '{streams:[{stream:{job:"trivy-scan", repo:"${{ github.repository }}", commit:"${{ github.sha }}"}, values:[["'$TIMESTAMP'", input]]}]}' < trivy-report.json)
          # Send logs to Loki
          curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer $GRAFANA_API_KEY" \
            --data "$LOG_ENTRY" \
            $LOKI_URL/loki/api/v1/push

      # 🐋 Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 🚀 Push image to DockerHub
      - name: Push Docker image
        if: success()
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }}
