name: CI/CD Pipeline with Security Scans

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-scan:
    runs-on: ubuntu-latest

    steps:
      # Checkout source code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Install dependencies
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest

      # Run tests
      - name: Run tests
        run: |
          if [ -f "requirements-test.txt" ]; then
            pip install -r requirements-test.txt
          fi
          pytest --junitxml=test-results.xml || echo "Tests failed or no tests found - continuing pipeline"

      # Build Docker image
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }} .

      # Run Security Scans
      - name: Run Gitleaks scan
        uses: zricethezav/gitleaks-action@v2
        with:
          args: detect --source . --report-format sarif --report-path gitleaks-report.sarif --verbose

      - name: Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }}
          format: table
          output: trivy-report.txt
          severity: CRITICAL,HIGH,MEDIUM,LOW
          ignore-unfixed: true

      - name: Generate Trivy JSON report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }}
          format: json
          output: trivy-report.json
          severity: CRITICAL,HIGH,MEDIUM,LOW
          ignore-unfixed: true
          exit-code: 0

      # Display Security Results
      - name: Display vulnerability summary
        run: |
          echo "=== SECURITY SCAN RESULTS ==="
          if [ -f "trivy-report.json" ]; then
            CRITICAL=$(jq '.Results[].Vulnerabilities[]? | select(.Severity == "CRITICAL") | .VulnerabilityID' trivy-report.json 2>/dev/null | wc -l || echo "0")
            HIGH=$(jq '.Results[].Vulnerabilities[]? | select(.Severity == "HIGH") | .VulnerabilityID' trivy-report.json 2>/dev/null | wc -l || echo "0")
            MEDIUM=$(jq '.Results[].Vulnerabilities[]? | select(.Severity == "MEDIUM") | .VulnerabilityID' trivy-report.json 2>/dev/null | wc -l || echo "0")
            LOW=$(jq '.Results[].Vulnerabilities[]? | select(.Severity == "LOW") | .VulnerabilityID' trivy-report.json 2>/dev/null | wc -l || echo "0")
            
            echo "üî¥ Critical: $CRITICAL"
            echo "üü† High: $HIGH" 
            echo "üü° Medium: $MEDIUM"
            echo "üîµ Low: $LOW"
            echo "üìä Total: $((CRITICAL + HIGH + MEDIUM + LOW))"
          else
            echo "No vulnerability data available"
          fi

          if [ -f "gitleaks-report.sarif" ]; then
            SECRETS=$(jq '.runs[0].results | length' gitleaks-report.sarif 2>/dev/null || echo "0")
            echo "üîê Secrets detected: $SECRETS"
          else
            echo "No secrets detection data available"
          fi

      # Send to Jenkins (via existing ngrok)
      - name: Send build info to Jenkins
        if: always()
        env:
          JENKINS_USER: ${{ secrets.JENKINS_USER }}
          JENKINS_API_TOKEN: ${{ secrets.JENKINS_API_TOKEN }}
        run: |
          # Extract security data
          if [ -f "trivy-report.json" ]; then
            CRITICAL=$(jq '.Results[].Vulnerabilities[]? | select(.Severity == "CRITICAL") | .VulnerabilityID' trivy-report.json 2>/dev/null | wc -l || echo "0")
            HIGH=$(jq '.Results[].Vulnerabilities[]? | select(.Severity == "HIGH") | .VulnerabilityID' trivy-report.json 2>/dev/null | wc -l || echo "0")
            MEDIUM=$(jq '.Results[].Vulnerabilities[]? | select(.Severity == "MEDIUM") | .VulnerabilityID' trivy-report.json 2>/dev/null | wc -l || echo "0")
            LOW=$(jq '.Results[].Vulnerabilities[]? | select(.Severity == "LOW") | .VulnerabilityID' trivy-report.json 2>/dev/null | wc -l || echo "0")
          else
            CRITICAL="0"
            HIGH="0"
            MEDIUM="0"
            LOW="0"
          fi

          # Send to Jenkins with simplified parameter names
          curl -X POST "https://accusatorial-unslighted-merlin.ngrok-free.dev/generic-webhook-trigger/invoke?token=github-ci-token" \
            -H "Content-Type: application/json" \
            -u "${JENKINS_USER}:${JENKINS_API_TOKEN}" \
            -d '{
              "commit": "${{ github.sha }}",
              "branch": "${{ github.ref_name }}",
              "repo": "${{ github.repository }}",
              "workflow": "${{ github.workflow }}",
              "critical": '"$CRITICAL"',
              "high": '"$HIGH"',
              "medium": '"$MEDIUM"',
              "low": '"$LOW"',
              "source": "github-actions",
              "forward_to_dashboard": "true"
            }'
          echo "‚úÖ Data sent to Jenkins"
      # Send to Local Dashboard (via Jenkins proxy)
      - name: Send to Local Dashboard via Jenkins
        if: always()
        run: |
          # This data will be forwarded by Jenkins to the local dashboard
          echo "üìä Security data will be forwarded to local dashboard via Jenkins"
          echo "üåê Local Dashboard: http://127.0.0.1:8000/"

      # Docker Operations
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image
        if: success()
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }}
          echo "‚úÖ Image pushed to DockerHub"

      # Upload artifacts
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ github.sha }}
          path: |
            gitleaks-report.sarif
            trivy-report.json
            trivy-report.txt
            test-results.xml
          retention-days: 7

      # Final status
      - name: Pipeline Complete
        run: |
          echo "üéâ CI/CD Pipeline Completed!"
          echo "üìä Check Jenkins for processing"
          echo "üìà Check Local Dashboard: http://127.0.0.1:8000/"
