name: CI/CD Pipeline with Security Scans

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-scan:
    runs-on: ubuntu-latest

    steps:
      # Checkout source code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Install dependencies
      - name: Install dependencies
        run: pip install -r requirements.txt

      # Run tests
      - name: Run tests
        run: |
          if [ -f "requirements-test.txt" ]; then
            pip install -r requirements-test.txt
          fi
          pytest || echo "Tests failed or no tests found - continuing pipeline"

      # Build Docker image
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }} .

      # Run Gitleaks scan (using environment variables)
      - name: Run Gitleaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITLEAKS_FORMAT: sarif
          GITLEAKS_PATH: .
          GITLEAKS_REPORT_PATH: gitleaks-report.sarif
        continue-on-error: true

      # Trivy vulnerability scan (table output)
      - name: Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }}
          format: table
          output: trivy-report.txt
          severity: CRITICAL
          ignore-unfixed: true
          exit-code: 0  # donâ€™t stop the pipeline
        continue-on-error: true

      # Display Trivy results in console
      - name: Display Trivy results
        run: |
          echo " TRIVY VULNERABILITY SCAN RESULTS:"
          echo "======================================"
          if [ -f "trivy-report.txt" ]; then
            cat trivy-report.txt
          else
            echo "No Trivy report generated"
          fi

      # Generate JSON report for automation
      - name: Generate Trivy JSON report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }}
          format: json
          output: trivy-report.json
          severity: CRITICAL,HIGH,MEDIUM,LOW
          ignore-unfixed: true
          exit-code: 0
        continue-on-error: true

      # Display vulnerability summary
      - name: Display vulnerability summary
        run: |
          echo " VULNERABILITY SUMMARY:"
          echo "=========================="
          if [ -f "trivy-report.json" ]; then
            CRITICAL=$(jq '.Results[].Vulnerabilities[]? | select(.Severity == "CRITICAL")' trivy-report.json | wc -l)
            HIGH=$(jq '.Results[].Vulnerabilities[]? | select(.Severity == "HIGH")' trivy-report.json | wc -l)
            MEDIUM=$(jq '.Results[].Vulnerabilities[]? | select(.Severity == "MEDIUM")' trivy-report.json | wc -l)
            LOW=$(jq '.Results[].Vulnerabilities[]? | select(.Severity == "LOW")' trivy-report.json | wc -l)
            echo "Critical: $CRITICAL"
            echo "High: $HIGH"
            echo "Medium: $MEDIUM"
            echo "Low: $LOW"
            echo "Total: $((CRITICAL + HIGH + MEDIUM + LOW))"
          else
            echo "No vulnerability data available"
          fi

      # Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Push Docker image
      - name: Push Docker image
        if: success()
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }}

      # Upload security reports
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            gitleaks-report.sarif
            trivy-report.json
            trivy-report.txt
          retention-days: 7

      # Send scan results to Grafana Cloud Loki
      - name: Send scan results to Grafana Cloud Loki
        env:
          GRAFANA_USERNAME: "1367479"
          GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }}
        run: |
          echo "Pushing Trivy results to Grafana Cloud..."
          curl -X POST "https://logs-prod-012.grafana.net/loki/api/v1/push" \
            -u "$GRAFANA_USERNAME:$GRAFANA_API_KEY" \
            -H "Content-Type: application/json" \
            --data-binary @<(cat <<EOF
          {
            "streams": [
              {
                "stream": {"job": "ci-cd", "repo": "${{ github.repository }}"},
                "values": [
                  ["$(date +%s%N)", "$(cat trivy-report.txt | sed 's/"/\\"/g' | tr -d '\n')"]
                ]
              }
            ]
          }
EOF
)
