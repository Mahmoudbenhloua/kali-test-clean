name: CI/CD Pipeline with Security Scans

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-scan:
    runs-on: ubuntu-latest
    steps:
      # Checkout source code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Python 3.11
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Install project dependencies
      - name: Install dependencies
        run: pip install -r requirements.txt

      # Run Python tests (if any)
      - name: Run tests
        run: pytest || echo "No tests found, skipping..."

      # Build Docker image tagged with commit SHA
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }} .

      # Run Trivy vulnerability scan with JSON output
      - name: Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }}
          severity: CRITICAL,HIGH,MEDIUM,LOW
          format: json
          output: trivy-report.json
          ignore-unfixed: true
          exit-code: 0

      # Push Trivy vulnerabilities as logs to Grafana Loki
      - name: Push Trivy vulnerabilities to Grafana Loki
        env:
          LOKI_URL: ${{ secrets.GRAFANA_LOKI_URL }}
          GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }}
          REPO: ${{ github.repository }}
          COMMIT: ${{ github.sha }}
        run: |
          TIMESTAMP=$(date +%s%N)
          # Extract vulnerabilities and format Loki streams
          STREAMS=$(jq -c --arg repo "$REPO" --arg commit "$COMMIT" --arg timestamp "$TIMESTAMP" '
            [ .Results[]?.Vulnerabilities[]? |
              {stream: {job: "trivy-scan", repo: $repo, commit: $commit, severity: .Severity},
               values: [[$timestamp, (. | tostring)]]}
            ]' trivy-report.json)

          PAYLOAD="{\"streams\":$STREAMS}"

          curl -X POST "$LOKI_URL" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $GRAFANA_API_KEY" \
            --data "$PAYLOAD"

      # Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Push Docker image to DockerHub
      - name: Push Docker image
        if: success()
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }}
