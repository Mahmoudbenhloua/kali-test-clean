name: Security Scan and Push to Grafana Cloud

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  security-scan:
    runs-on: ubuntu-latest

    env:
      GRAFANA_LOKI_URL: https://logs-prod-012.grafana.net
      GRAFANA_USER_ID: "1367479"
      GRAFANA_API_KEY: "glc_eyJvIjoiMTU2NDMxMCIsIm4iOiJzdGFjay0xNDA5Njg1LWhsLXJlYWQtdGVzdCIsImsiOiI4ODhjRWxGNHhIMmtYNkNRNTAxRW5CRzQiLCJtIjp7InIiOiJwcm9kLWV1LXdlc3QtMiJ9fQ=="

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          docker build -t "mariobh/kali-test:${{ github.sha }}" .

      - name: Install Trivy
        run: |
          wget https://github.com/aquasecurity/trivy/releases/download/v0.49.1/trivy_0.49.1_Linux-64bit.tar.gz
          tar -xzf trivy_0.49.1_Linux-64bit.tar.gz
          sudo mv trivy /usr/local/bin/

      - name: Run Trivy vulnerability scan
        run: |
          trivy image \
            --severity CRITICAL,HIGH \
            --ignore-unfixed \
            --format json \
            --output trivy-results.json \
            "mariobh/kali-test:${{ github.sha }}"

      - name: Debug - Check if Trivy file exists
        run: |
          ls -la
          if [ -f "trivy-results.json" ]; then
            echo "✅ trivy-results.json exists"
            echo "File size: $(wc -l < trivy-results.json) lines"
          else
            echo "❌ trivy-results.json not found"
          fi

      - name: Push scan results to Grafana Cloud
        if: always()
        run: |
          set -eo pipefail
          echo "Sending security scan results to Grafana Cloud..."

          TIMESTAMP=$(date +%s000000000)
          
          if [ -f "trivy-results.json" ]; then
            echo "Processing Trivy results..."
            
            # Count vulnerabilities
            CRITICAL_COUNT=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-results.json || echo "0")
            HIGH_COUNT=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity == "HIGH")] | length' trivy-results.json || echo "0")
            
            SUMMARY="Trivy Scan: $CRITICAL_COUNT Critical, $HIGH_COUNT High vulnerabilities - Repo: $GITHUB_REPOSITORY"
            
            echo "Summary: $SUMMARY"
            
            # Create payload
            PAYLOAD=$(cat << EOF
{
  "streams": [
    {
      "stream": {
        "job": "security-scans",
        "tool": "trivy",
        "repository": "$GITHUB_REPOSITORY",
        "branch": "$GITHUB_REF_NAME",
        "commit": "$GITHUB_SHA"
      },
      "values": [
        ["$TIMESTAMP", "$SUMMARY"]
      ]
    }
  ]
}
EOF
)
            
            echo "Sending to Grafana Cloud Loki..."
            response=$(curl -s -w "HTTP_STATUS:%{http_code}" \
              -u "$GRAFANA_USER_ID:$GRAFANA_API_KEY" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD" \
              "$GRAFANA_LOKI_URL/loki/api/v1/push")
            
            # Extract HTTP status
            http_status=$(echo "$response" | grep -o 'HTTP_STATUS:[0-9]*' | cut -d: -f2)
            
            if [ "$http_status" = "204" ] || [ "$http_status" = "200" ]; then
              echo "✅ Trivy results sent successfully (HTTP $http_status)"
            else
              echo "❌ Failed to send to Grafana Cloud (HTTP $http_status)"
              echo "Response: $response"
            fi
            
          else
            echo "❌ trivy-results.json not found - cannot send to Grafana"
          fi

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image
        if: success()
        run: |
          docker push "mariobh/kali-test:${{ github.sha }}"

