name: Security Scan and Push to Grafana Cloud

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  security-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }}
          format: json
          output: trivy-results.json
          severity: CRITICAL,HIGH
          ignore-unfixed: true

      - name: Run Grype scan
        run: |
          docker run --rm \
            -v $(pwd):/work \
            anchore/grype:latest \
            ${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }} -o json > grype-results.json

      - name: Push scan results to Grafana Cloud
        if: always()
        env:
          GRAFANA_USER_ID: ${{ secrets.GRAFANA_USER_ID }}
          GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }}
          GRAFANA_LOKI_URL: https://logs-prod-012.grafana.net
        run: |
          echo "Sending security scan results to Grafana Cloud..."

          push_to_loki() {
            local tool=$1
            local file=$2
            local timestamp=$(date +%s000000000)

            if [ -f "$file" ]; then
              if [ "$tool" = "trivy" ]; then
                CRITICAL_COUNT=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' "$file")
                HIGH_COUNT=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity == "HIGH")] | length' "$file")
                SUMMARY="Trivy Scan: $CRITICAL_COUNT Critical, $HIGH_COUNT High vulnerabilities"
              else
                CRITICAL_COUNT=$(jq '.matches[]? | select(.vulnerability.severity == "Critical") | .vulnerability.id' "$file" | wc -l)
                HIGH_COUNT=$(jq '.matches[]? | select(.vulnerability.severity == "High") | .vulnerability.id' "$file" | wc -l)
                SUMMARY="Grype Scan: $CRITICAL_COUNT Critical, $HIGH_COUNT High vulnerabilities"
              fi

              # Push to Loki (Grafana Cloud)
              curl -X POST "$GRAFANA_LOKI_URL/loki/api/v1/push" \
                -u "$GRAFANA_USER_ID:$GRAFANA_API_KEY" \
                -H "Content-Type: application/json" \
                -d @- <<EOF
{
  "streams": [
    {
      "stream": {
        "job": "security-scans",
        "tool": "$tool",
        "repository": "${{ github.repository }}",
        "branch": "${{ github.ref_name }}",
        "commit": "${{ github.sha }}"
      },
      "values": [
        [ "$timestamp", "$SUMMARY" ]
      ]
    }
  ]
}
EOF

              echo "✅ $tool results sent to Grafana Cloud"
            else
              echo "⚠️ File $file not found, skipping $tool"
            fi
          }

          push_to_loki "trivy" "trivy-results.json"
          push_to_loki "grype" "grype-results.json"
