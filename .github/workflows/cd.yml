name: CI/CD Pipeline with Security Scans

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-scan:
    runs-on: ubuntu-latest

    steps:
      #  Checkout source code
      - name: Checkout code
        uses: actions/checkout@v4

      #  Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      #  Install dependencies
      - name: Install dependencies
        run: pip install -r requirements.txt

      #  Run tests
      - name: Run tests
        run: |
          if [ -f "requirements-test.txt" ]; then
            pip install -r requirements-test.txt
          fi
          pytest || echo "Tests failed or no tests found - continuing pipeline"

      #  Build Docker image
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }} .

      #  Run Gitleaks scan
      - name: Run Gitleaks scan
        uses: zricethezav/gitleaks-action@v2
        with:
          args: detect --source . --report-format sarif --report-path gitleaks-report.sarif --verbose

      #  Trivy vulnerability scan (console + JSON)
      - name: Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }}
          format: table
          output: trivy-report.txt
          severity: CRITICAL
          ignore-unfixed: true
          exit-code: 1

      - name: Generate Trivy JSON report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }}
          format: json
          output: trivy-report.json
          severity: CRITICAL,HIGH,MEDIUM,LOW
          ignore-unfixed: true
          exit-code: 0

      #  Display Trivy results summary
      - name: Display vulnerability summary
        run: |
          if [ -f "trivy-report.json" ]; then
            CRITICAL=$(jq '.Results[].Vulnerabilities[]? | select(.Severity == "CRITICAL") | .VulnerabilityID' trivy-report.json 2>/dev/null | wc -l || echo "0")
            HIGH=$(jq '.Results[].Vulnerabilities[]? | select(.Severity == "HIGH") | .VulnerabilityID' trivy-report.json 2>/dev/null | wc -l || echo "0")
            MEDIUM=$(jq '.Results[].Vulnerabilities[]? | select(.Severity == "MEDIUM") | .VulnerabilityID' trivy-report.json 2>/dev/null | wc -l || echo "0")
            LOW=$(jq '.Results[].Vulnerabilities[]? | select(.Severity == "LOW") | .VulnerabilityID' trivy-report.json 2>/dev/null | wc -l || echo "0")
            
            echo "Critical: $CRITICAL"
            echo "High: $HIGH" 
            echo "Medium: $MEDIUM"
            echo "Low: $LOW"
            echo "Total: $((CRITICAL + HIGH + MEDIUM + LOW))"
          else
            echo "No vulnerability data available"
          fi

      #  Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      #  Push Docker image
      - name: Push Docker image
        if: success()
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }}

      #  Upload security reports as artifacts
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            gitleaks-report.sarif
            trivy-report.json
            trivy-report.txt
          retention-days: 7

      #  ðŸ”— Send build info + Trivy/Gitleaks results to Jenkins
      - name: Send build info to Jenkins
        if: always()
        env:
          JENKINS_USER: ${{ secrets.JENKINS_USER }}
          JENKINS_API_TOKEN: ${{ secrets.JENKINS_API_TOKEN }}
        run: |
          curl -X POST "https://accusatorial-unslighted-merlin.ngrok-free.dev/generic-webhook-trigger/invoke?token=github-ci-token" \
            -H "Content-Type: application/json" \
            -u "${JENKINS_USER}:${JENKINS_API_TOKEN}" \
            -d '{
              "commit": "${{ github.sha }}",
              "branch": "${{ github.ref_name }}",
              "repo": "${{ github.repository }}",
              "trivy": '"$(cat trivy-report.json | jq .)"',
              "image": "'"${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }}"'"
            }'
