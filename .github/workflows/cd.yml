name: CI/CD Pipeline with Security Scans

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-scan:
    runs-on: ubuntu-latest

    steps:
      # üß© Checkout source code
      - name: Checkout code
        uses: actions/checkout@v4

      # üêç Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # üì¶ Install dependencies
      - name: Install dependencies
        run: pip install -r requirements.txt

      # üß™ Run tests
      - name: Run tests
        run: pytest || echo "No tests found, skipping..."

      # üê≥ Build Docker image
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }} .

      # üîç Trivy vulnerability scan (JSON output)
      - name: Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }}
          severity: CRITICAL,HIGH,MEDIUM,LOW
          format: json
          output: trivy-report.json
          ignore-unfixed: true
          exit-code: 0  # do not fail the build even if vulnerabilities are found

      # üì§ Push Trivy report to Grafana Loki
      - name: Push Trivy report to Grafana Loki
        env:
          LOKI_URL: https://logs-prod-012.grafana.net
          GRAFANA_USER_ID: 1367479
          GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }}
        run: |
          TIMESTAMP=$(date +%s%N)
          # Convert the entire Trivy JSON into a single escaped string
          LOG_CONTENT=$(cat trivy-report.json | jq -Rs .)
          
          cat <<EOF > payload.json
          {
            "streams": [
              {
                "stream": {
                  "job": "trivy-scan",
                  "repo": "${{ github.repository }}",
                  "commit": "${{ github.sha }}"
                },
                "values": [
                  ["$TIMESTAMP", $LOG_CONTENT]
                ]
              }
            ]
          }
          EOF

          echo "Sending logs to Loki..."
          curl -v -u "${GRAFANA_USER_ID}:${GRAFANA_API_KEY}" \
            -H "Content-Type: application/json" \
            -X POST \
            --data @payload.json \
            $LOKI_URL/loki/api/v1/push
      - name: Run Gitleaks scan
        uses: zricethezav/gitleaks-acÔøΩon@v2
      # üêã Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # üöÄ Push image to DockerHub
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }}
