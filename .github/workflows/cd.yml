name: CI/CD Pipeline with Security Scans

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-scan:
    runs-on: ubuntu-latest

    steps:
      # ------------------------------
      # 1. Checkout source code
      # ------------------------------
      - name: Checkout code
        uses: actions/checkout@v4

      # ------------------------------
      # 2. Set up Python
      # ------------------------------
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # ------------------------------
      # 3. Install dependencies
      # ------------------------------
      - name: Install dependencies
        run: pip install -r requirements.txt

      # ------------------------------
      # 4. Run tests (if any)
      # ------------------------------
      - name: Run tests
        run: |
          if [ -f "requirements-test.txt" ]; then
            pip install -r requirements-test.txt
          fi
          pytest || echo "Tests failed or no tests found - continuing pipeline"

      # ------------------------------
      # 5. Build Docker image
      # ------------------------------
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }} .

      # ------------------------------
      # 6. Gitleaks scan
      # ------------------------------
      - name: Run Gitleaks scan
        uses: zricethezav/gitleaks-action@v2
        with:
          args: detect --source . --report-format sarif --report-path gitleaks-report.sarif --verbose

      # ------------------------------
      # 7. Trivy scan (table format)
      # ------------------------------
      - name: Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }}
          format: table
          output: trivy-report.txt
          severity: CRITICAL
          ignore-unfixed: true
          exit-code: 1

      # ------------------------------
      # 8. Display Trivy results in console
      # ------------------------------
      - name: Display Trivy results
        run: |
          echo " TRIVY VULNERABILITY SCAN RESULTS:"
          echo "======================================"
          if [ -f "trivy-report.txt" ]; then
            cat trivy-report.txt
          else
            echo "No Trivy report generated"
          fi

      # ------------------------------
      # 9. Generate JSON report for automation
      # ------------------------------
      - name: Generate Trivy JSON report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }}
          format: json
          output: trivy-report.json
          severity: CRITICAL,HIGH,MEDIUM,LOW
          ignore-unfixed: true
          exit-code: 0

      # ------------------------------
      # 10. Display summary of vulnerabilities
      # ------------------------------
      - name: Display vulnerability summary
        run: |
          echo " VULNERABILITY SUMMARY:"
          echo "=========================="
          if [ -f "trivy-report.json" ]; then
            CRITICAL=$(jq '.Results[].Vulnerabilities[]? | select(.Severity == "CRITICAL") | .VulnerabilityID' trivy-report.json 2>/dev/null | wc -l || echo "0")
            HIGH=$(jq '.Results[].Vulnerabilities[]? | select(.Severity == "HIGH") | .VulnerabilityID' trivy-report.json 2>/dev/null | wc -l || echo "0")
            MEDIUM=$(jq '.Results[].Vulnerabilities[]? | select(.Severity == "MEDIUM") | .VulnerabilityID' trivy-report.json 2>/dev/null | wc -l || echo "0")
            LOW=$(jq '.Results[].Vulnerabilities[]? | select(.Severity == "LOW") | .VulnerabilityID' trivy-report.json 2>/dev/null | wc -l || echo "0")
            
            echo "Critical: $CRITICAL"
            echo "High: $HIGH" 
            echo "Medium: $MEDIUM"
            echo "Low: $LOW"
            echo "Total: $((CRITICAL + HIGH + MEDIUM + LOW))"
          else
            echo "No vulnerability data available"
          fi

      # ------------------------------
      # 11. Log in to DockerHub
      # ------------------------------
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # ------------------------------
      # 12. Push Docker image
      # ------------------------------
      - name: Push Docker image
        if: success()
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/kali-test:${{ github.sha }}

      # ------------------------------
      # 13. Upload reports as artifacts
      # ------------------------------
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            gitleaks-report.sarif
            trivy-report.json
            trivy-report.txt
          retention-days: 7

      # ------------------------------
      # 14. Send Trivy report to Grafana Cloud Loki
      # ------------------------------
      - name: Push Trivy JSON report to Grafana Cloud Loki
        if: always()
        env:
          LOKI_URL: ${{ secrets.GRAFANA_LOKI_URL }}
          LOKI_USER: ${{ secrets.GRAFANA_LOKI_USER }}
          LOKI_PASS: ${{ secrets.GRAFANA_LOKI_PASS }}
        run: |
          if [ -f "trivy-report.json" ]; then
            echo "Sending Trivy results to Grafana Cloud Loki..."
            TIMESTAMP=$(date +%s%N)
            LOG_LINE=$(jq -c '.' trivy-report.json)
            cat > /tmp/loki-payload.json <<EOF
            {
              "streams": [
                {
                  "stream": {
                    "job": "trivy-scan",
                    "repo": "${GITHUB_REPOSITORY}",
                    "branch": "${GITHUB_REF_NAME}",
                    "sha": "${GITHUB_SHA}"
                  },
                  "values": [ [ "${TIMESTAMP}", ${LOG_LINE} ] ]
                }
              ]
            }
            EOF
            curl -s -u "$LOKI_USER:$LOKI_PASS" \
              -H "Content-Type: application/json" \
              -X POST "$LOKI_URL" \
              --data @/tmp/loki-payload.json || echo "Loki push failed"
          else
            echo "No trivy-report.json file found"
          fi

      # ------------------------------
      # 15. Send Gitleaks report to Grafana Cloud Loki
      # ------------------------------
      - name: Push Gitleaks SARIF report to Grafana Cloud Loki
        if: always()
        env:
          LOKI_URL: ${{ secrets.GRAFANA_LOKI_URL }}
          LOKI_USER: ${{ secrets.GRAFANA_LOKI_USER }}
          LOKI_PASS: ${{ secrets.GRAFANA_LOKI_PASS }}
        run: |
          if [ -f "gitleaks-report.sarif" ]; then
            echo "Sending Gitleaks results to Grafana Cloud Loki..."
            TIMESTAMP=$(date +%s%N)
            LOG_LINE=$(jq -c '.' gitleaks-report.sarif)
            cat > /tmp/loki-payload.json <<EOF
            {
              "streams": [
                {
                  "stream": {
                    "job": "gitleaks-scan",
                    "repo": "${GITHUB_REPOSITORY}",
                    "branch": "${GITHUB_REF_NAME}",
                    "sha": "${GITHUB_SHA}"
                  },
                  "values": [ [ "${TIMESTAMP}", ${LOG_LINE} ] ]
                }
              ]
            }
            EOF
            curl -s -u "$LOKI_USER:$LOKI_PASS" \
              -H "Content-Type: application/json" \
              -X POST "$LOKI_URL" \
              --data @/tmp/loki-payload.json || echo "Loki push failed"
          else
            echo "No gitleaks-report.sarif file found"
          fi
